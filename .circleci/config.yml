version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environments"
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name frontend-<< parameters.workflow_id >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token:  ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm migrations:revert
              exit 1
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
          
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-build]
      - run:
          name: run backend test
          command: |
            cd frontend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [frontend-scan]
      - run: 
          name: run frontend scan
          command: |
            cd frontend
            npm install
            
     
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-scan]
      - run: 
          name: run backend scan
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Installing dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
             aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
                       
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             aws ec2 describe-instances \
              #--filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text >> .circleci/ansible/inventory.txt                   
                # yum install -y tar gzip
                echo `cat .circleci/ansible/inventory.txt`
      - persist_to_workspace:
          root: ~/
          paths: ["project/.circleci/ansible/inventory.txt"]
          
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      
  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['be:75:19:66:94:61:d7:1d:a7:e8:66:de:1f:d3:a2:1d']
      - attach_workspace:
          at: ~/            
      - run:
          name: Install dependencies
          command: |
            # apk add tar
            # apk add nodejs npm
            # apk add gzip curl
            apk add --update ansible
            # pip install awscli           
      - run:
          name: Configure server
          command: |       
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            
            #echo ENVIRONMENT=production >> "backend/.env"
            #echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            #echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            #echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            #echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            #echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            #echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            #echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            #echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            #cat backend/.env
            #cd .circleci/ansible
            #ansible-playbook -i inventory.txt configure-server.yml
            
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations
     
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations > migrations_status.txt
            cat ./migrations_status.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - run:
          name: Send migration results to memstash or kvdb.io
          command: |
            echo "DB migration was successful, will update kvdb..."
            curl -k https://kvdb.io/SGTo3Ds8ouwYMneqCQvHAQ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'success'
            
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations
          
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1  \
                --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query "Reservations[].Instances[*].PublicIpAddress" \
                --output text)            
            export API_URL="${BACKEND_ip}:3030"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
     
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations            
      
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "be:75:19:66:94:61:d7:1d:a7:e8:66:de:1f:d3:a2:1d"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add tar gzip nodejs npm
            apk add --update ansible
            apk add --no-cache curl
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
          # apk upgrade
          # apk update
            
      - run:
          name: Create env file
          command: |
            cd backend
            touch .env
            echo "TYPEORM_CONNECTION=postgres" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./src/migrations" >> .env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> .env
            echo "TYPEORM_MIGRATIONS=./src/migrations/*.ts" >> .env
            # Use these values for the local PG database from the Docker Compose file
            echo "TYPEORM_HOST=${TYPEORM_HOST}"  >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            cat .env
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            ls
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations
  smoke-test:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
            apk add --update nodejs
            apk add --update curl
            apk add --update npm
            apk add --update tar
            apk add --update gzip
            pip3 install awscli
            aws --version
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo SUCCESS
              return 1
            else
              echo FAIL
              return 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations

  # Promotion Phase
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["be:75:19:66:94:61:d7:1d:a7:e8:66:de:1f:d3:a2:1d"]
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the old stack workflow id
            export OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            echo "Cloudfront distribution updated"
      #- destroy-environment
      #- revert-migrations
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            # Fetch the old stack workflow id
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo Old Workflow ID: $OldWorkflowID
            # Fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo "Stack names are ${STACKS[@]}"
            
            #Condition to remove stacks/s3 bucket
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Removing stacks/s3 bucket"
              # Remove stacks
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"  
            fi  

workflows:
  my_default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]    
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]   
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]    
      - configure-infrastructure:
          filters:
            branches:
              only: [master]
          requires: [deploy-infrastructure]  
      - run-migrations:
          requires: [configure-infrastructure]      
      - deploy-frontend:
          requires: [run-migrations]     
      - deploy-backend:
          requires: [run-migrations]  
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]    
      - cloudfront-update:
          requires: [smoke-test]      
      - cleanup:
          requires: [cloudfront-update]
