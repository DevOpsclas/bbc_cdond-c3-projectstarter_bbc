version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environments"
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name frontend-<< parameters.workflow_id >>
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: 7251a524-2f00-4920-a3bf-e4de84450e38" \
              --request GET https://api.memstash.io/values/migration_"${CIRCLE_WORKFLOW_ID}")
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm migrations:revert
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm i
            npm run lint
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Backend build
          command: |
            cd backend
            npm i
            npm run lint
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Frontend tests
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Backend tests
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Scanning Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Scanning Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Installing dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity Name=Backend \
              --stack-name backend-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_IP
            curl -H "Content-Type: text/plain" -H "token: 7251a524-2f00-4920-a3bf-e4de84450e38" --request PUT \
              --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_IP
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity Name=Frontend \
              --stack-name frontend-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[all]" > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ '21:a2:0d:9e:26:5a:7a:77:95:2e:1b:31:ab:e2:ad:51' ]
      - attach_workspace:
          at: project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add tar
            apk add gzip
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            exit 1
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm install
            npm audit fix --audit-level=critical --force
            npm run migrations > migration_result.txt
      - run:
          name: Send migration results to memstash
          command: |
            grep successfully migration_result.txt
            if [ $? -eq 0 ]
              echo "Didn't migrate successfully"
              curl -H "Content-Type: text/plain" -H "token: 7251a524-2f00-4920-a3bf-e4de84450e38" --request PUT \
                --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "migrate successful"
              curl -H "Content-Type: text/plain" -H "token: 7251a524-2f00-4920-a3bf-e4de84450e38" --request PUT \
                --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            exit 1
            fi
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install nodejs npm gzip tar -y
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 7251a524-2f00-4920-a3bf-e4de84450e38" \
              --request GET https://api.memstash.io/values/BACKEND_IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            npm run build
            aws s3 sync ./dist/frontend s3://udapeople-"${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ '21:a2:0d:9e:26:5a:7a:77:95:2e:1b:31:ab:e2:ad:51' ]
      - attach_workspace:
          at: ~/project/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 7251a524-2f00-4920-a3bf-e4de84450e38" \
              --request GET https://api.memstash.io/values/BACKEND_IP)
      - run:
          name: Backend smoke test.
          command: |
            curl http://$BACKEND_IP:3000/api/status
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gzip tar
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name cloudfront-stack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations

  cleanup:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
            fi


workflows:
  default:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [ build-frontend ]
#      - test-backend:
#          requires: [ build-backend ]
#      - scan-backend:
#          requires: [ build-backend ]
#      - scan-frontend:
#          requires: [ build-frontend ]
      - deploy-infrastructure:
#          requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
          filters:
            branches:
              only: [ master ]
      - configure-infrastructure:
          requires: [ deploy-infrastructure ]
      - run-migrations:
          requires: [ configure-infrastructure ]
      - deploy-frontend:
          requires: [ run-migrations ]
      - deploy-backend:
          requires: [ run-migrations ]
      - smoke-test:
          requires: [ deploy-backend, deploy-frontend ]
      - cloudfront-update:
          requires: [ smoke-test ]
      - cleanup:
          requires: [ cloudfront-update ]