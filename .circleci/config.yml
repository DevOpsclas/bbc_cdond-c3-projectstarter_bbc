version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environments"
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name frontend-<< parameters.workflow_id >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token:  ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            echo $SUCCESS
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm migrations:revert
              exit 1
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
          
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-build]
      - run:
          name: run backend test
          command: |
            cd frontend
            npm install
            npm run test
  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [frontend-scan]
      - run: 
          name: run frontend scan
          command: |
            cd frontend
            npm install
            
     
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-scan]
      - run: 
          name: run backend scan
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Installing dependencies
          command: |
            yum install -y tar gzip curl
      - run:
          name: Ensure back-end infrastructure exists
          command: |
             aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" 
                       
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name frontend-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cmd=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query "Reservations[*].Instances[*].PublicDnsName" \
              --output text)
            
            for dnsname in $cmd; do 
              echo $dnsname >> .circleci/ansible/inventory.txt; 
            done            
            yum install -y tar gzip
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: ["project/.circleci/ansible/inventory.txt"]
          
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['a5:a6:97:0c:39:6f:94:b8:d7:b9:78:5f:40:e4:57:08']
      - attach_workspace:
          at: ~/            
      - run:
          name: Install dependencies
          command: |
            apk add tar
            apk add gzip curl
            apk add --update ansible
            pip install awscli           
      - run:
          name: Configure server
          command: |
           mkdir ".circleci/ansible/roles/configure-server/files/"
            cp backend/package.json ".circleci/ansible/roles/configure-server/files/"            
            inventory=".circleci/ansible/inventory.txt"
            playbook=".circleci/ansible/configure-server.yml"
            ansible-playbook -i $inventory $playbook
     
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install awscli
          command: |
            sudo apt-get -y update
            sudo apt-get -y install python3 \
              python3-pip \
              python3-setuptools \
              curl
            pip3 install --upgrade pip
            pip3 --no-cache-dir install --upgrade awscli
      - run:
          name: installing dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migration_result.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            cat  migrations.log 
            if ( grep -F "successfully"  migrations.log ); then
              curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "1"  "https://api.memstash.io/values/migrations_${CIRCLE_WORKFLOW_ID}"
            else 
              curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "0"  "https://api.memstash.io/values/migrations_${CIRCLE_WORKFLOW_ID}"
            fi
      - persist_to_workspace:
          root: ~/
          paths: ["project/backend/dist"]
      # Here's where you will add some code to rollback on failure
      #- destroy-environment:
      #    id: ${CIRCLE_WORKFLOW_ID}
      #    isEmpty: "yes"
      #    requireAWSCLI: "yes"
          
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install gzip tar python3-pip curl -y
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install nodejs npm -y
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/BACKEND_IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm update
            npm run build
            ls -alh
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            ls -alh
            aws s3 cp dist/ s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive          
workflows:
  my_default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [ build-frontend ]
      - test-backend:
          requires: [ build-backend ]
      - scan-backend:
          requires: [ build-backend ]
      - scan-frontend:
          requires: [ build-frontend ]
      - deploy-infrastructure:
          requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
          filters:
            branches:
              only: [ master ]
      - configure-infrastructure:
          requires: [ deploy-infrastructure ]
      - run-migrations:
          requires: [ configure-infrastructure ]
